// src/pages/auth/ForgotPassword.jsx
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { Loader2 } from 'lucide-react';

import authService from '../../services/authService';
import { useToast } from '../../contexts/ToastContext';
import { Card, CardContent, CardHeader } from '../../components/ui/card';
import { Button } from '../../components/ui/button';
import { Input } from '../../components/ui/input';
import { Label } from '../../components/ui/label';

const validationSchema = yup.object({
  email: yup
    .string()
    .required('Email l√† b·∫Øt bu·ªôc.')
    .matches(/^[^\s@]+@[^\s@]+\.[^\s@]+$/, 'Vui l√≤ng nh·∫≠p email h·ª£p l·ªá.'),
});

const ForgotPassword = () => {
  const toast = useToast();

  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState('');
  const [error, setError] = useState('');
  const [cooldown, setCooldown] = useState(0);

  const {
    register,
    trigger,
    getFieldState,
    setValue,
    formState: { errors, isValid },
  } = useForm({
    resolver: yupResolver(validationSchema),
    mode: 'onChange',
    reValidateMode: 'onChange',
    defaultValues: {
      email: '',
    },
  });

  const emailRegister = register('email');

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    const valid = await trigger('email');
    if (!valid) {
      const fieldError = getFieldState('email').error?.message;
      const validationMessage = fieldError || 'Vui l√≤ng nh·∫≠p email h·ª£p l·ªá.';
      setError(validationMessage);
      toast.error(validationMessage);
      setLoading(false);
      return;
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      const validationMessage = 'Vui l√≤ng nh·∫≠p email h·ª£p l·ªá.';
      setError(validationMessage);
      toast.error(validationMessage);
      setLoading(false);
      return;
    }

    try {
      console.log('üìß Sending forgot password request for:', email);
      const response = await authService.forgotPassword(email);
      console.log('‚úÖ Forgot password response:', response);

      if (response.success) {
        const successMessage =
          'Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c g·ª≠i. N·∫øu email c·ªßa b·∫°n t·ªìn t·∫°i trong h·ªá th·ªëng, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c h∆∞·ªõng d·∫´n trong v√†i ph√∫t. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ (k·ªÉ c·∫£ m·ª•c Spam).';
        setSuccess(successMessage);
        toast.success('ƒê√£ g·ª≠i h∆∞·ªõng d·∫´n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u!');
        setEmail('');
        setValue('email', '');
        setCooldown(60);
      } else {
        const message = response.message || 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.';
        setError(message);
        toast.error(message);
      }
    } catch (err) {
      console.error('‚ùå Forgot password error:', err);

      if (err.response?.data?.message) {
        setError(err.response.data.message);
        toast.error(err.response.data.message);
      } else if (err.message === 'Network error - Cannot connect to server') {
        const networkMessage =
          'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.';
        setError(networkMessage);
        toast.error(networkMessage);
      } else if (err.message === 'Request timeout') {
        const timeoutMessage = 'K·∫øt n·ªëi b·ªã gi√°n ƒëo·∫°n. Vui l√≤ng th·ª≠ l·∫°i.';
        setError(timeoutMessage);
        toast.error(timeoutMessage);
      } else {
        const fallbackMessage = err.message || 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.';
        setError(fallbackMessage);
        toast.error(fallbackMessage);
      }
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (cooldown <= 0) return;
    const interval = setInterval(() => {
      setCooldown((prev) => {
        if (prev <= 1) {
          clearInterval(interval);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, [cooldown]);

  return (
    <main
      className="min-vh-100 bg-neutral-100"
      style={{ fontFamily: "'Inter', 'Segoe UI', 'Helvetica Neue', Arial, sans-serif" }}
    >
      <div className="container-fluid p-0 min-vh-100">
        <div className="row g-0 min-vh-100">
          <div className="col-lg-7 d-none d-lg-block">
            <img
              src="https://tsportline.com/cdn/shop/files/black-tesla-model-s-21-inch-aftermarket-wheels-tss-gloss-black-rear-1920-2_1600x.png?v=1680200206"
              alt="Tesla Model S"
              className="img-fluid"
              style={{ width: '100%', height: '100%', objectFit: 'cover', objectPosition: 'center' }}
            />
          </div>

          <div className="col-lg-5 d-flex align-items-center justify-content-center bg-white py-5">
            <div className="w-100 px-4 px-sm-5" style={{ maxWidth: '420px' }}>
              <Card className="border-0 shadow-none">
                <CardHeader className="space-y-3 text-center">
                  <h1 className="text-2xl font-semibold text-neutral-900">
                    Qu√™n M·∫≠t Kh·∫©u
                  </h1>
                  <p className="text-sm leading-6 text-gray-500">
                    Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ email ƒë√£ ƒëƒÉng k√Ω. Ch√∫ng t√¥i s·∫Ω g·ª≠i cho b·∫°n m·ªôt li√™n k·∫øt ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.
                  </p>
                </CardHeader>

                <CardContent className="space-y-6">
                  {success && (
                    <div
                      role="status"
                      aria-live="polite"
                      className="rounded-lg border border-emerald-100 bg-emerald-50 px-4 py-3 text-sm text-emerald-700 text-start"
                    >
                      {success}
                    </div>
                  )}

                  {error && (
                    <div
                      role="alert"
                      aria-live="assertive"
                      className="rounded-lg border border-red-100 bg-red-50 px-4 py-3 text-sm text-red-600 text-start"
                    >
                      {error}
                    </div>
                  )}

                  <form className="space-y-5" onSubmit={handleSubmit} noValidate>
                    <div className="space-y-2 text-start">
                      <Label htmlFor="email" className="text-sm font-medium text-neutral-700">
                        Email
                      </Label>
                      <Input
                        id="email"
                        type="email"
                        name={emailRegister.name}
                        ref={emailRegister.ref}
                        onBlur={(event) => emailRegister.onBlur(event)}
                        value={email}
                        onChange={(event) => {
                          setEmail(event.target.value);
                          emailRegister.onChange(event);
                        }}
                        placeholder="nhapemail@example.com"
                        autoComplete="email"
                        disabled={loading}
                        className={`h-11 rounded-lg border border-neutral-200 bg-white px-4 text-neutral-900 placeholder:text-neutral-400 focus-visible:ring-2 focus-visible:ring-accent-600 ${
                          errors.email ? 'border-red-500 focus-visible:ring-red-500' : ''
                        }`}
                      />
                      {errors.email && (
                        <p className="text-sm text-red-500">{errors.email.message}</p>
                      )}
                    </div>

                    <Button
                      type="submit"
                      disabled={loading || cooldown > 0 || !isValid}
                      className="h-11 w-full rounded-lg bg-accent-600 text-white font-medium transition hover:bg-accent-700 focus-visible:ring-2 focus-visible:ring-accent-600 focus-visible:ring-offset-2 disabled:opacity-60"
                    >
                      {loading ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          ƒêang g·ª≠i...
                        </>
                      ) : cooldown > 0 ? (
                        `Th·ª≠ l·∫°i sau ${cooldown}s`
                      ) : (
                        'G·ª≠i H∆∞·ªõng D·∫´n'
                      )}
                    </Button>
                  </form>

                  <div className="pt-2 text-center">
                    <Link
                      to="/login"
                      className="text-sm font-medium text-gray-500 transition hover:text-gray-700"
                    >
                      ‚Üê Quay l·∫°i trang ƒêƒÉng nh·∫≠p
                    </Link>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </div>
    </main>
  );
};

export default ForgotPassword;

